#pragma hdrstop

#include "Variant6.h"

MyList :: ~MyList()
{
	while(Head)
	{
		Tail = Head->Next;
		delete Head;
		Head = Tail;
	}
}

void MyList :: RemoveMinus()
{
	Node *prevTemp, *curTemp;
	prevTemp = Head;
	if (Head == Tail && Head->x < 0)      //если в списке один элемент
	{
		delete Head;
		Head = Tail = NULL;
	}
	else
	{//проверка элементов между первым и последним (вход в цикл если 3 и больше эл.)
		curTemp = prevTemp->Next;
		while (curTemp->Next != NULL)
		{
			if (curTemp->x < 0)
			{
				(curTemp->Next)->Prev = curTemp->Prev;
				(curTemp->Prev)->Next = curTemp->Next;
				delete curTemp;
				curTemp = prevTemp->Next;
			}
			else
			{
				curTemp = curTemp->Next;
				prevTemp = prevTemp->Next;
			}
		}
		if (Head->x < 0)           //проверка первого элемента
		{
			curTemp = Head->Next;
			delete Head;
			Head = curTemp;
			Head->Prev = NULL;
		}
		if (Tail->x < 0)          //проверка последнего элемента
		{
			if (Head != Tail)     //когда осталось более 1 элемента
			{
				curTemp = Tail->Prev;
				(Tail->Prev)->Next = NULL;
				delete Tail;
				Tail = curTemp;
			}
			else       //когда остался 1 элемент (весь список был отрицательный)
			{
				delete Tail;
				Head = Tail = NULL;
			}
		}
	}
}

#pragma package(smart_init)




//Node *prevTemp, *curTemp;
//	prevTemp = Head;
//	curTemp = prevTemp->Next;
//	while (curTemp->Next != NULL)
//	{
//		if (curTemp->x < 0)
//		{
//			(curTemp->Next)->Prev = curTemp->Prev;
//			(curTemp->Prev)->Next = curTemp->Next;
//			delete curTemp;
//			curTemp = prevTemp->Next;
//		}
//		else
//		{
//			curTemp = curTemp->Next;
//			prevTemp = prevTemp->Next;
//		}
//	}
//	if (Head->x < 0)
//	{
//		curTemp = Head->Next;
//		delete Head;
//		Head = curTemp;
//		Head->Prev = NULL;
//	}
//	if (Tail->x < 0)
//	{
//		curTemp = Tail->Prev;
//		(Tail->Prev)->Next = NULL;
//		delete Tail;
//		Tail = curTemp;
//	}
